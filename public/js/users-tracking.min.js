/*!
  * This is users tracking behavior script
  * Copyright 2025 Modobom
  * Licensed under MIT
  */
const userEvents = [], throttleDelay = 1e3, userUUID = getUserUUID(); var mouseMovements = 0, keyPresses = 0, lastInteractionTime = Date.now(), userStartTime = (new Date).getTime(), throttleTimeout = null, heatmapData = {}; async function getUserInfo() { return { userAgent: navigator.userAgent, platform: navigator.platform, language: navigator.language, cookiesEnabled: navigator.cookieEnabled, screenWidth: window.screen.width, screenHeight: window.screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, ip: await getUserIP() } } function isBot() { const e = Date.now(), t = e - lastInteractionTime, n = navigator.userAgent.toLowerCase(), o = [/bot/i, /spider/i, /crawler/i, /slurp/i, /googlebot/i, /bingbot/i, /yandexbot/i, /duckduckbot/i, /baiduspider/i, /facebot/i, /ia_archiver/i]; for (const e of o) if (e.test(n)) return !0; return t < 100 || (lastInteractionTime = e, !1) } function sendDataToServer(e) { let t = checkURL(); fetch(t, { method: "POST", mode: "no-cors", headers: { "Content-Type": "application/json" }, body: JSON.stringify(e) }).catch((e => console.error("Error:", e))) } async function recordEvent(e, t) { const n = { eventName: e, eventData: t, timestamp: (new Date).toISOString(), user: getUserInfo(), domain: window.location.hostname, uuid: userUUID }; userEvents.push(n), isBot() || sendDataToServer(n) } function checkURL() { const e = window.location.hostname; let t = ""; return t = "localhost" === e || "127.0.0.1" === e ? "http://127.0.0.1:8000/api" : "https://apkhype.com/api", t += "/users-tracking", t } function throttle(e, t) { return function (...n) { throttleTimeout || (throttleTimeout = setTimeout((() => { e(...n), throttleTimeout = null }), t)) } } function generateUUID() { return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (function (e) { const t = 16 * Math.random() | 0; return ("x" === e ? t : 3 & t | 8).toString(16) })) } function getUserUUID() { let e = localStorage.getItem("userUUID"); return e || (e = generateUUID(), localStorage.setItem("userUUID", e)), e } async function getUserIP() { try { const e = await fetch("https://api.ipify.org?format=json"); return (await e.json()).ip } catch (e) { return console.error("Error fetching IP:", e), "unknown" } } !function (e) { "use strict"; document.addEventListener("click", throttle((e => { const t = e.target; let n = { x: e.clientX, y: e.clientY, target: t.tagName, href: "", isInternalLink: !1, isLassoButton: !1, lassoButtonLink: "" }; "A" === t.tagName && t.href.includes(window.location.hostname) ? (n.href = t.href, n.isInternalLink = !0, recordEvent("internal_link_click", n)) : "A" === t.tagName && t.classList.contains("lasso-button") ? (n.href = t.href, n.isLassoButton = !0, recordEvent("lasso_button_click", n)) : recordEvent("click", n) }), 1e3)), document.addEventListener("mousemove", throttle((e => { const t = e.clientX, n = e.clientY, o = `${t},${n}`; heatmapData[o] || (heatmapData[o] = 0), heatmapData[o]++, recordEvent("mousemove", { x: t, y: n }) }), 1e3)), document.addEventListener("scroll", throttle((() => { recordEvent("scroll", { scrollTop: window.scrollY, scrollLeft: window.scrollX }) }), 1e3)), document.addEventListener("input", (e => { recordEvent("input", { target: e.target.tagName, value: e.target.value }) }), 1e3), document.addEventListener("keydown", throttle((e => { recordEvent("keydown", { target: e.target.tagName, value: e.target.value }), keyPresses++ }), 1e3)), window.addEventListener("resize", (function () { recordEvent("resize", { width: window.innerWidth, height: window.innerHeight }) }), 1e3), window.addEventListener("beforeunload", (function () { let e = (new Date).getTime(); recordEvent("beforeunload", { start: userStartTime, end: e, total: e - userStartTime, heatmapData: heatmapData }) }), 1e3) }();