/*!
  * This is users tracking behavior script
  * Copyright 2025 Modobom
  * Licensed under MIT
  */
!function (t) { "use strict"; const e = [], n = 1e3, o = function () { let t = localStorage.getItem("userUUID"); t || (t = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (function (t) { const e = 16 * Math.random() | 0; return ("x" === t ? e : 3 & e | 8).toString(16) })), localStorage.setItem("userUUID", t)); return t }(); var i = 0, a = Date.now(), r = (new Date).getTime(), s = null, c = {}; async function l() { return { userAgent: navigator.userAgent, platform: navigator.platform, language: navigator.language, cookiesEnabled: navigator.cookieEnabled, screenWidth: window.screen.width, screenHeight: window.screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone, ip: await m() } } function u(t) { let e = function () { const t = window.location.hostname; let e = ""; e = "localhost" === t || "127.0.0.1" === t ? "http://127.0.0.1:8000/api" : "https://apkhype.com/api"; return e += "/users-tracking", e }(); fetch(e, { method: "POST", mode: "no-cors", headers: { "Content-Type": "application/json" }, body: JSON.stringify(t) }).catch((t => console.error("Error:", t))) } async function d(t, n) { const i = { eventName: t, eventData: n, timestamp: (new Date).toISOString(), user: l(), domain: window.location.hostname, uuid: o }; e.push(i), function () { const t = Date.now(), e = t - a, n = navigator.userAgent.toLowerCase(), o = [/bot/i, /spider/i, /crawler/i, /slurp/i, /googlebot/i, /bingbot/i, /yandexbot/i, /duckduckbot/i, /baiduspider/i, /facebot/i, /ia_archiver/i]; for (const t of o) if (t.test(n)) return !0; return e < 100 || (a = t, !1) }() || u(i) } function g(t, e) { return function (...n) { s || (s = setTimeout((() => { t(...n), s = null }), e)) } } async function m() { try { const t = await fetch("https://api.ipify.org?format=json", { mode: "no-cors" }); return (await t.json()).ip } catch (t) { return console.error("Error fetching IP:", t), "unknown" } } document.addEventListener("click", g((t => { const e = t.target; let n = { x: t.clientX, y: t.clientY, target: e.tagName, href: "", isInternalLink: !1, isLassoButton: !1, lassoButtonLink: "" }; "A" === e.tagName && e.href.includes(window.location.hostname) ? (n.href = e.href, n.isInternalLink = !0, d("internal_link_click", n)) : "A" === e.tagName && e.classList.contains("lasso-button") ? (n.href = e.href, n.isLassoButton = !0, d("lasso_button_click", n)) : d("click", n) }), n)), document.addEventListener("mousemove", g((t => { const e = t.clientX, n = t.clientY, o = `${e},${n}`; c[o] || (c[o] = 0), c[o]++, d("mousemove", { x: e, y: n, mouseMovements: ++i }) }), n)), document.addEventListener("scroll", g((() => { d("scroll", { scrollTop: window.scrollY, scrollLeft: window.scrollX }) }), n)), document.addEventListener("input", (t => { d("input", { target: t.target.tagName, value: t.target.value }) }), n), document.addEventListener("keydown", g((t => { d("keydown", { target: t.target.tagName, value: t.target.value }) }), n)), window.addEventListener("resize", (function () { d("resize", { width: window.innerWidth, height: window.innerHeight }) }), n), window.addEventListener("beforeunload", (function () { let t = (new Date).getTime(); d("beforeunload", { start: r, end: t, total: t - r, heatmapData: c }) }), n) }();