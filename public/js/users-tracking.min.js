/*!
  * This is users tracking behavior script
  * Copyright 2025 Modobom
  * Licensed under MIT
  */
!function (t) { "use strict"; const e = function () { let t = localStorage.getItem("userUUID"); t || (t = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (function (t) { const e = 16 * Math.random() | 0; return ("x" === t ? e : 3 & e | 8).toString(16) })), localStorage.setItem("userUUID", t)); return t }(); var n = 0; const o = 252e5; var a = Date.now() + o, i = (new Date).getTime() + o, r = 0, s = Date.now(); function c() { const t = Date.now(); r += t - s, s = t } function d(t) { let e = function () { const t = window.location.hostname; let e = ""; e = "localhost" === t || "127.0.0.1" === t ? "http://127.0.0.1:8000" : "https://apkhype.com"; return e += "/create-users-tracking", e }(); fetch(e, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(t) }).catch((t => console.error("Error:", t))) } function l(t, n) { const i = window.location.pathname + window.location.search, r = { eventName: t, eventData: n, timestamp: function (t) { const e = t.getFullYear(), n = String(t.getMonth() + 1).padStart(2, "0"), o = String(t.getDate()).padStart(2, "0"), a = String(t.getHours()).padStart(2, "0"), i = String(t.getMinutes()).padStart(2, "0"), r = String(t.getSeconds()).padStart(2, "0"); return `${e}-${n}-${o} ${a}:${i}:${r}` }(new Date), user: { userAgent: navigator.userAgent, platform: navigator.platform, language: navigator.language, cookiesEnabled: navigator.cookieEnabled, screenWidth: window.screen.width, screenHeight: window.screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone }, domain: window.location.hostname, uuid: e, path: i }; (function () { const t = Date.now() + o, e = t - a, n = navigator.userAgent.toLowerCase(), i = [/bot/i, /spider/i, /crawler/i, /slurp/i, /googlebot/i, /bingbot/i, /yandexbot/i, /duckduckbot/i, /baiduspider/i, /facebot/i, /ia_archiver/i]; for (const t of i) if (t.test(n)) return !0; return e < 100 || (a = t, !1) })() || d(r) } window.addEventListener("focus", (() => { s = Date.now() })), window.addEventListener("blur", (() => { c() })), document.addEventListener("click", (t => { const e = t.target; let n = { x: t.clientX, y: t.clientY, target: e.tagName, href: "", isInternalLink: !1, isLassoButton: !1, lassoButtonLink: "" }; "A" === e.tagName && e.href.includes(window.location.hostname) ? (n.href = e.href, n.isInternalLink = !0, l("internal_link_click", n)) : "A" === e.tagName && e.classList.contains("lasso-button") ? (n.href = e.href, n.isLassoButton = !0, l("lasso_button_click", n)) : l("click", n) })), document.addEventListener("mousemove", (t => { l("mousemove", { x: t.clientX, y: t.clientY, mouseMovements: ++n }) })), document.addEventListener("scroll", (() => { l("scroll", { scrollTop: window.scrollY, scrollLeft: window.scrollX }) })), document.addEventListener("input", (t => { l("input", { target: t.target.tagName, value: t.target.value }) })), document.addEventListener("keydown", (t => { l("keydown", { target: t.target.tagName, value: t.target.value }) })), window.addEventListener("resize", (function () { l("resize", { width: window.innerWidth, height: window.innerHeight }) })), window.addEventListener("beforeunload", (function () { let t = (new Date).getTime(); c(), l("beforeunload", { start: i, end: t, total: r }) })) }();