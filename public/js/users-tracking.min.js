/*!
  * This is users tracking behavior script
  * Copyright 2025 Modobom
  * Licensed under MIT
  */
!function (t) { "use strict"; const e = 1e3, n = function () { let t = localStorage.getItem("userUUID"); t || (t = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (function (t) { const e = 16 * Math.random() | 0; return ("x" === t ? e : 3 & e | 8).toString(16) })), localStorage.setItem("userUUID", t)); return t }(); var o = 0, a = Date.now(), i = (new Date).getTime(), r = null, s = {}, c = 0, l = Date.now(); function d() { const t = Date.now(); c += t - l, l = t } function u(t) { let e = function () { const t = window.location.hostname; let e = ""; e = "localhost" === t || "127.0.0.1" === t ? "http://127.0.0.1:8000" : "https://apkhype.com"; return e += "/create-users-tracking", e }(); fetch(e, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(t) }).catch((t => console.error("Error:", t))) } function g(t, e) { const o = window.location.pathname + window.location.search, i = { eventName: t, eventData: e, timestamp: function (t) { const e = t.getFullYear(), n = String(t.getMonth() + 1).padStart(2, "0"), o = String(t.getDate()).padStart(2, "0"), a = String(t.getHours()).padStart(2, "0"), i = String(t.getMinutes()).padStart(2, "0"), r = String(t.getSeconds()).padStart(2, "0"); return `${e}-${n}-${o} ${a}:${i}:${r}` }(new Date), user: { userAgent: navigator.userAgent, platform: navigator.platform, language: navigator.language, cookiesEnabled: navigator.cookieEnabled, screenWidth: window.screen.width, screenHeight: window.screen.height, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone }, domain: window.location.hostname, uuid: n, path: o }; (function () { const t = Date.now(), e = t - a, n = navigator.userAgent.toLowerCase(), o = [/bot/i, /spider/i, /crawler/i, /slurp/i, /googlebot/i, /bingbot/i, /yandexbot/i, /duckduckbot/i, /baiduspider/i, /facebot/i, /ia_archiver/i]; for (const t of o) if (t.test(n)) return !0; return e < 100 || (a = t, !1) })() || u(i) } function w(t, e) { return function (...n) { r || (r = setTimeout((() => { t(...n), r = null }), e)) } } window.addEventListener("focus", (() => { l = Date.now() })), window.addEventListener("blur", (() => { d() })), document.addEventListener("click", (t => { const e = t.target; let n = { x: t.clientX, y: t.clientY, target: e.tagName, href: "", isInternalLink: !1, isLassoButton: !1, lassoButtonLink: "" }; "A" === e.tagName && e.href.includes(window.location.hostname) ? (n.href = e.href, n.isInternalLink = !0, g("internal_link_click", n)) : "A" === e.tagName && e.classList.contains("lasso-button") ? (n.href = e.href, n.isLassoButton = !0, g("lasso_button_click", n)) : g("click", n) })), document.addEventListener("mousemove", (t => { const e = t.clientX, n = t.clientY, a = `${e},${n}`; s[a] || (s[a] = 0), s[a]++, g("mousemove", { x: e, y: n, mouseMovements: ++o }) })), document.addEventListener("scroll", w((() => { g("scroll", { scrollTop: window.scrollY, scrollLeft: window.scrollX }) }), e)), document.addEventListener("input", (t => { g("input", { target: t.target.tagName, value: t.target.value }) }), e), document.addEventListener("keydown", w((t => { g("keydown", { target: t.target.tagName, value: t.target.value }) }), e)), window.addEventListener("resize", (function () { g("resize", { width: window.innerWidth, height: window.innerHeight }) })), window.addEventListener("beforeunload", (function () { let t = (new Date).getTime(), e = t - i; d(), g("beforeunload", { start: i, end: t, total: e, heatmapData: s, totalOnSite: c }) })) }();